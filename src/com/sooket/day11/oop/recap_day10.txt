프로그래밍 언어 : 자바
자바의 특징 : 객체지향(개발방법론) vs 절차지향
객체지향 프로그래밍 : 클래스와 객체
객체지향 원칙 : 캡슐화 상속 (추상화) 다형성 -> 캡~상추다!!
1. 캡슐화
 - 클래스의 등장배경과 함께 설명 
 (다양한 자료형의 변수를 선언하기 위해 등장한 배열과 보안을 위한 접근자로 데이터보안을 강화하고 따로 접근할 수 있는 메소드를 생성한다 
 - private(필드는 private), getter/setter(메소드는 public)
2. 상속
 - extends(상속 키워드), super(부모클래스 소환), super() (부모클래스 생성자)
 - protected
3. 다형성
 - 업캐스팅 -> 부모클래스를 상속받은 자식클래스의 객체를 부모클래스 타입으로 다룰 수 있는것
		public class Sonata extends Car{} / Car car = new Sonate(); 업캐스팅 문법 
 - 다운캐스팅 -> 업캐스팅된 부모클래스 타입의 자식클래스 객체를 다시 자식클래스의 데이터를 다룰수있도록 자식클래스의 객체 타입으로 바꾸는것
  		Sonata s = (Sonata) car; 다운캐스팅
 - instanceof 	
  다형성의 예 : 객체 배열 , 매개변수
  	instanceof / 여러개의 형태를 가진 변수의 타입을 구별하기 위해 사용
  	
 - 오버라이딩(동적바인딩) : 부모클래스를 상속받은 자식클래스가 상속받은 필드나 메소드의 출력값을 바꿔서 진행할 수 있도록 하는것
			Super s = new Sub(); 업캐스팅 상태에서 동일한 형태의 메소드나 필드값이 있다면 자식의 값으로 동적 바인딩 됨
나의 정리 : 부모의 참조변수안에 자식의 객체를 넣었으니 기능은 제한되지만 동일한 부모를 상속한 여러 자식클래스의 객체의 다향성을 사용할 수 있음
 
 - 오버로딩(정적바인딩) : 
		컴파일 시간 다형성 ;
		메소드의 이름은 동일하게 생성하나 생성자의 매개변수를 모두 다르게 하여 하나의 메소드로 다양한 값을 만들 수 있게하는것
		
////////////////////////////////////선생님 정리///////////////////////////////////////////////		
		
		프로그래밍 언어 : 자바
자바의 특징 : 객체지향(개발방법론) vs 절차지향 
객체지향 프로그래밍 : 클래스와 객체
객체지향 원칙 : 캡슐화 상속 (추상화) 다형성 -> 캡~상추다!!
1. 캡슐화 
 - 클래스의 등장배경과 함께 설명
 - private, getter/setter
 2. 상속
 - extends, super, super()
 - protected
 3. 다형성
 - 업캐스팅/다운캐스팅, instanceof
 - 오버라이딩(동적바인딩), 오버로딩(정적바인딩)